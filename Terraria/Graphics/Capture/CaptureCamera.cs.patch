--- src/decompiled/Terraria/Graphics/Capture/CaptureCamera.cs
+++ src/Terraria/Terraria/Graphics/Capture/CaptureCamera.cs
@@ -5,10 +_,15 @@
 using System.Drawing;
 using System.Drawing.Imaging;
 using System.IO;
+#if WINDOWS
 using System.Runtime.InteropServices;
+#endif
 using System.Threading;
 using Terraria.Graphics.Effects;
 using Terraria.Localization;
+#if !WINDOWS
+using Terraria.Utilities;
+#endif
 
 namespace Terraria.Graphics.Capture
 {
@@ -177,10 +_,17 @@
 					byte* ptr4 = ptr3 + (destinationBufferWidth * area.Y + area.X << 2);
 					for (int i = 0; i < area.Height; i++) {
 						for (int j = 0; j < area.Width; j++) {
+#if WINDOWS
-							ptr4[2] = *ptr2;
+							ptr4[2] = ptr2[0];
 							ptr4[1] = ptr2[1];
-							*ptr4 = ptr2[2];
+							ptr4[0] = ptr2[2];
 							ptr4[3] = ptr2[3];
+#else
+							ptr4[0] = ptr2[0];
+							ptr4[1] = ptr2[1];
+							ptr4[2] = ptr2[2];
+							ptr4[3] = ptr2[3];
+#endif
 							ptr2 += 4;
 							ptr4 += 4;
 						}
@@ -199,6 +_,7 @@
 				return false;
 
 			try {
+#if WINDOWS
 				using (Bitmap bitmap = new Bitmap(width, height)) {
 					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, width, height);
 					BitmapData bitmapData = bitmap.LockBits(rect, ImageLockMode.WriteOnly, PixelFormat.Format32bppPArgb);
@@ -208,6 +_,11 @@
 					bitmap.Save(filename, imageFormat);
 					bitmap.Dispose();
 				}
+#else
+				using (FileStream fileStream = File.Create(filename)) {
+					PlatformUtilities.SavePng(fileStream, width, height, width, height, _outputData);
+				}
+#endif
 
 				return true;
 			}
@@ -223,19 +_,30 @@
 			if (!Utils.TryCreatingDirectory(text))
 				return;
 
+#if WINDOWS
 			using (Bitmap bitmap = new Bitmap(width, height)) {
 				System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, width, height);
+#else
+			{//keep the formatter happy
+#endif
 				int elementCount = texture.Width * texture.Height * 4;
 				texture.GetData(_outputData, 0, elementCount);
 				int num = 0;
 				int num2 = 0;
 				for (int i = 0; i < height; i++) {
 					for (int j = 0; j < width; j++) {
+#if WINDOWS
 						byte b = _outputData[num + 2];
 						_outputData[num2 + 2] = _outputData[num];
 						_outputData[num2] = b;
 						_outputData[num2 + 1] = _outputData[num + 1];
 						_outputData[num2 + 3] = _outputData[num + 3];
+#else
+						_outputData[num2] = _outputData[num];
+						_outputData[num2 + 1] = _outputData[num + 1];
+						_outputData[num2 + 2] = _outputData[num + 2];
+						_outputData[num2 + 3] = _outputData[num + 3];
+#endif
 						num += 4;
 						num2 += 4;
 					}
@@ -243,12 +_,20 @@
 					num += texture.Width - width << 2;
 				}
 
+#if WINDOWS
 				BitmapData bitmapData = bitmap.LockBits(rect, ImageLockMode.WriteOnly, PixelFormat.Format32bppPArgb);
 				IntPtr scan = bitmapData.Scan0;
 				Marshal.Copy(_outputData, 0, scan, width * height * 4);
 				bitmap.UnlockBits(bitmapData);
 				bitmap.Save(filename2, imageFormat);
 			}
+#else
+			}
+
+			using (FileStream fileStream = File.Create(filename2)) {
+				PlatformUtilities.SavePng(fileStream, width, height, width, height, this._outputData);
+			}
+#endif
 		}
 
 		private void FinishCapture() {
@@ -279,6 +_,7 @@
 		}
 
 		public void Dispose() {
+#if CLIENT
 			Monitor.Enter(_captureLock);
 			if (!_isDisposed) {
 				_frameBuffer.Dispose();
@@ -293,6 +_,7 @@
 				_isDisposed = true;
 				Monitor.Exit(_captureLock);
 			}
+#endif
 		}
 	}
 }
